From a01cf2d361017dd97cd98d28c8d3782b4ab9d8dd Mon Sep 17 00:00:00 2001
From: Michael Auchter <a@phire.org>
Date: Thu, 27 Jan 2022 15:28:29 +0000
Subject: [PATCH 2/2] Add brutefir_config option

The idea behind this is to add a new flag to snapclient,
--brutefir_config, which specifies the path to the brutefir config file.
If this is not provided, brutefir isn't used to filter the data.

If it is provided, we'll pass this to brutefir as the config to use.
We'll also make sure brutefir's working directory is the same directory
as the config file, which will allow using relative coefficient paths in
the configuration file.
---
 client/brutefir.cpp        | 22 +++++++++++++++-------
 client/brutefir.hpp        |  7 +++----
 client/client_settings.hpp |  1 +
 client/controller.cpp      |  2 +-
 client/snapclient.cpp      |  2 ++
 client/stream.cpp          |  9 ++++++---
 client/stream.hpp          |  2 +-
 7 files changed, 29 insertions(+), 16 deletions(-)

diff --git a/client/brutefir.cpp b/client/brutefir.cpp
index 99ca9cc1..30c74b59 100644
--- a/client/brutefir.cpp
+++ b/client/brutefir.cpp
@@ -18,6 +18,9 @@
 
 #include <string>
 #include <cstdio>
+#include <vector>
+#include <boost/process/start_dir.hpp>
+#include <boost/filesystem.hpp>
 #include "brutefir.hpp"
 #include "common/aixlog.hpp"
 #include "common/snap_exception.hpp"
@@ -29,14 +32,18 @@ using namespace std;
 
 static constexpr auto LOG_TAG = "BruteFIR";
 
-BruteFIR::BruteFIR(boost::asio::io_context& ioc, add_chunk_callback cb)
-    : addChunk(cb), pipe_stdout_(ioc), pipe_stdin_(ioc), pipe_stderr_(ioc)
+BruteFIR::BruteFIR(const std::string& brutefir_config, boost::asio::io_context& ioc, add_chunk_callback cb)
+    : pipe_stdout_(ioc), pipe_stdin_(ioc), pipe_stderr_(ioc), add_chunk_(cb)
 {
     auto exe = bp::search_path("brutefir");
     if (exe == "")
         throw SnapException("brutefir not found");
 
+    auto config = boost::filesystem::path(brutefir_config);
+
     LOG(DEBUG, LOG_TAG) << "Found BruteFIR binary at: " << exe << "\n";
+    LOG(DEBUG, LOG_TAG) << "Using config: " << brutefir_config << "\n";
+    LOG(DEBUG, LOG_TAG) << "Parent: " << config.parent_path() << "\n";
 
     try
     {
@@ -54,7 +61,7 @@ BruteFIR::BruteFIR(boost::asio::io_context& ioc, add_chunk_callback cb)
         }
     }
 
-    process_ = bp::child(exe, bp::std_out > pipe_stdout_, bp::std_err > pipe_stderr_, bp::std_in < pipe_stdin_);
+    process_ = bp::child(exe, brutefir_config, bp::start_dir(config.parent_path()), bp::std_out > pipe_stdout_, bp::std_err > pipe_stderr_, bp::std_in < pipe_stdin_);
 }
 
 BruteFIR::~BruteFIR()
@@ -69,20 +76,21 @@ BruteFIR::~BruteFIR()
 void BruteFIR::filter(std::shared_ptr<msg::PcmChunk> chunk)
 {
     if (!process_.running())
+    {
         throw SnapException("BruteFIR process not running, bailing...");
+    }
 
-    boost::asio::async_write(pipe_stdin_, boost::asio::buffer(chunk->payload, chunk->payloadSize), [this](const std::error_code& ec, std::size_t bytes) {
+    boost::asio::async_write(pipe_stdin_, boost::asio::buffer(chunk->payload, chunk->payloadSize), [this](const std::error_code& ec, std::size_t) {
         if (ec)
         {
             LOG(WARNING, LOG_TAG) << "async write failed: " << ec.message() << "\n";
             return;
         }
-
     });
 
     chunks_.push(chunk);
 
-    boost::asio::async_read(pipe_stdout_, boost::asio::buffer(chunk->payload, chunk->payloadSize), [this](const std::error_code& ec, std::size_t bytes) {
+    boost::asio::async_read(pipe_stdout_, boost::asio::buffer(chunk->payload, chunk->payloadSize), [this](const std::error_code& ec, std::size_t) {
         if (ec)
         {
             LOG(WARNING, LOG_TAG) << "async read failed: " << ec.message() << "\n";
@@ -90,7 +98,7 @@ void BruteFIR::filter(std::shared_ptr<msg::PcmChunk> chunk)
         }
 
         auto chunk = chunks_.pop();
-        addChunk(chunk);
+        add_chunk_(chunk);
     });
 
 }
diff --git a/client/brutefir.hpp b/client/brutefir.hpp
index b1272109..7f4bc3cb 100644
--- a/client/brutefir.hpp
+++ b/client/brutefir.hpp
@@ -36,20 +36,19 @@ using add_chunk_callback = std::function<void(std::shared_ptr<msg::PcmChunk>)>;
 class BruteFIR
 {
 public:
-    BruteFIR(boost::asio::io_context& ioc, add_chunk_callback cb);
+    BruteFIR(const std::string& brutefir_config, boost::asio::io_context& ioc, add_chunk_callback cb);
     virtual ~BruteFIR();
 
     void filter(std::shared_ptr<msg::PcmChunk> chunk);
 private:
-    add_chunk_callback addChunk;
-
-    mutable std::mutex mutex_;
     Queue<std::shared_ptr<msg::PcmChunk>> chunks_;
 
     bp::child process_;
     bp::async_pipe pipe_stdout_;
     bp::async_pipe pipe_stdin_;
     bp::async_pipe pipe_stderr_;
+
+    add_chunk_callback add_chunk_;
 };
 
 #endif
diff --git a/client/client_settings.hpp b/client/client_settings.hpp
index 2e12cb01..4b16c131 100644
--- a/client/client_settings.hpp
+++ b/client/client_settings.hpp
@@ -64,6 +64,7 @@ struct ClientSettings
         SampleFormat sample_format;
         SharingMode sharing_mode{SharingMode::unspecified};
         Mixer mixer;
+        std::string brutefir_config{""};
     };
 
     struct Logging
diff --git a/client/controller.cpp b/client/controller.cpp
index b72735dc..a8a9be48 100644
--- a/client/controller.cpp
+++ b/client/controller.cpp
@@ -180,7 +180,7 @@ void Controller::getNextMessage()
             sampleFormat_ = decoder_->setHeader(headerChunk_.get());
             LOG(INFO, LOG_TAG) << "Codec: " << headerChunk_->codec << ", sampleformat: " << sampleFormat_.toString() << "\n";
 
-            stream_ = make_shared<Stream>(sampleFormat_, settings_.player.sample_format, io_context_);
+            stream_ = make_shared<Stream>(sampleFormat_, settings_.player.sample_format, settings_.player.brutefir_config, io_context_);
             stream_->setBufferLen(std::max(0, serverSettings_->getBufferMs() - serverSettings_->getLatency() - settings_.player.latency));
 
 #ifdef HAS_ALSA
diff --git a/client/snapclient.cpp b/client/snapclient.cpp
index 1b87df81..c82c300e 100644
--- a/client/snapclient.cpp
+++ b/client/snapclient.cpp
@@ -151,6 +151,8 @@ int main(int argc, char** argv)
         auto sample_format = op.add<Value<string>>("", "sampleformat", "resample audio stream to <rate>:<bits>:<channels>", "");
 #endif
 
+	auto brutefir_config = op.add<Value<string>>("", "brutefir_config", "path to brutefir config to use for filtering", "", &settings.player.brutefir_config);
+
         auto supported_players = Controller::getSupportedPlayerNames();
         string supported_players_str;
         for (const auto& supported_player : supported_players)
diff --git a/client/stream.cpp b/client/stream.cpp
index 8463e64e..4e4c4e0a 100644
--- a/client/stream.cpp
+++ b/client/stream.cpp
@@ -40,7 +40,7 @@ static constexpr auto kCorrectionBegin = 100us;
 
 // #define LOG_LATENCIES
 
-Stream::Stream(const SampleFormat& in_format, const SampleFormat& out_format, boost::asio::io_context& ioc)
+Stream::Stream(const SampleFormat& in_format, const SampleFormat& out_format, const string& brutefir_config, boost::asio::io_context& ioc)
     : in_format_(in_format), median_(0), shortMedian_(0), lastUpdate_(0), playedFrames_(0), correctAfterXFrames_(0), bufferMs_(cs::msec(500)), frame_delta_(0),
       hard_sync_(true)
 {
@@ -65,7 +65,10 @@ Stream::Stream(const SampleFormat& in_format, const SampleFormat& out_format, bo
     */
     // setRealSampleRate(format_.rate());
     resampler_ = std::make_unique<Resampler>(in_format_, format_);
-    brutefir_ = std::make_unique<BruteFIR>(ioc, std::bind(&Stream::addChunkForPlayback, this, std::placeholders::_1));
+    if (brutefir_config != "")
+    {
+        brutefir_ = std::make_unique<BruteFIR>(brutefir_config, ioc, std::bind(&Stream::addChunkForPlayback, this, std::placeholders::_1));
+    }
 }
 
 
@@ -109,7 +112,7 @@ void Stream::addChunk(unique_ptr<msg::PcmChunk> chunk)
     if (!resampled)
         return;
 
-    if (true)
+    if (brutefir_)
         brutefir_->filter(std::move(resampled));
     else
         addChunkForPlayback(resampled);
diff --git a/client/stream.hpp b/client/stream.hpp
index 8b6adac2..6737a260 100644
--- a/client/stream.hpp
+++ b/client/stream.hpp
@@ -40,7 +40,7 @@
 class Stream
 {
 public:
-    Stream(const SampleFormat& in_format, const SampleFormat& out_format, boost::asio::io_context& ioc);
+    Stream(const SampleFormat& in_format, const SampleFormat& out_format, const std::string& brutefir_config, boost::asio::io_context& ioc);
     virtual ~Stream() = default;
 
     /// Adds PCM data to the queue
-- 
2.33.1

