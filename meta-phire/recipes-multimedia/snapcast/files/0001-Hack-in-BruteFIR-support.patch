From 9064ac019cb55aed7dfd3dd3c63633773254514f Mon Sep 17 00:00:00 2001
From: Michael Auchter <a@phire.org>
Date: Wed, 12 Jan 2022 16:41:31 +0000
Subject: [PATCH 1/2] Hack in BruteFIR support

---
 CMakeLists.txt        |  2 +-
 client/CMakeLists.txt |  3 ++
 client/brutefir.cpp   | 97 +++++++++++++++++++++++++++++++++++++++++++
 client/brutefir.hpp   | 55 ++++++++++++++++++++++++
 client/controller.cpp |  2 +-
 client/stream.cpp     | 43 ++++++++++++-------
 client/stream.hpp     |  7 +++-
 7 files changed, 190 insertions(+), 19 deletions(-)
 create mode 100644 client/brutefir.cpp
 create mode 100644 client/brutefir.hpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4381a71c..00db6dfb 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -280,7 +280,7 @@ if(NOT WIN32 AND NOT ANDROID)
 endif()
 
 if(NOT ANDROID)
-    find_package(Boost 1.70 REQUIRED)
+    find_package(Boost 1.70 COMPONENTS filesystem system REQUIRED)
 else()
     find_package(oboe REQUIRED CONFIG)
     find_package(flac REQUIRED CONFIG)
diff --git a/client/CMakeLists.txt b/client/CMakeLists.txt
index 29f0b4b1..471f62cc 100644
--- a/client/CMakeLists.txt
+++ b/client/CMakeLists.txt
@@ -1,4 +1,5 @@
 set(CLIENT_SOURCES
+    brutefir.cpp
     client_connection.cpp
     controller.cpp
     snapclient.cpp
@@ -53,6 +54,8 @@ elseif(NOT ANDROID)
         list(APPEND CLIENT_LIBRARIES ${PULSE_LIBRARIES})
         list(APPEND CLIENT_INCLUDE ${PULSE_INCLUDE_DIRS})
     endif (PULSE_FOUND)
+
+    list(APPEND CLIENT_LIBRARIES ${Boost_FILESYSTEM_LIBRARY} ${Boost_SYSTEM_LIBRARY})
 endif (MACOSX)
 
 if (ANDROID)
diff --git a/client/brutefir.cpp b/client/brutefir.cpp
new file mode 100644
index 00000000..99ca9cc1
--- /dev/null
+++ b/client/brutefir.cpp
@@ -0,0 +1,97 @@
+/***
+    This file is part of snapcast
+    Copyright (C) 2022 Michael Auchter
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+***/
+
+#include <string>
+#include <cstdio>
+#include "brutefir.hpp"
+#include "common/aixlog.hpp"
+#include "common/snap_exception.hpp"
+#include "common/str_compat.hpp"
+#include "common/utils.hpp"
+#include "common/utils/string_utils.hpp"
+
+using namespace std;
+
+static constexpr auto LOG_TAG = "BruteFIR";
+
+BruteFIR::BruteFIR(boost::asio::io_context& ioc, add_chunk_callback cb)
+    : addChunk(cb), pipe_stdout_(ioc), pipe_stdin_(ioc), pipe_stderr_(ioc)
+{
+    auto exe = bp::search_path("brutefir");
+    if (exe == "")
+        throw SnapException("brutefir not found");
+
+    LOG(DEBUG, LOG_TAG) << "Found BruteFIR binary at: " << exe << "\n";
+
+    try
+    {
+        bp::system("killall brutefir");
+    }
+    catch (const std::exception &)
+    {
+        try
+        {
+            bp::system("pkill brutefir");
+        }
+        catch (const std::exception &)
+        {
+            LOG(WARNING, LOG_TAG) << "Failed to kill existing BruteFIR process" << "\n";
+        }
+    }
+
+    process_ = bp::child(exe, bp::std_out > pipe_stdout_, bp::std_err > pipe_stderr_, bp::std_in < pipe_stdin_);
+}
+
+BruteFIR::~BruteFIR()
+{
+    if (process_.running())
+    {
+        LOG(DEBUG, LOG_TAG) << "Killing BruteFIR process" << "\n";
+        ::kill(-process_.native_handle(), SIGINT);
+    }
+}
+
+void BruteFIR::filter(std::shared_ptr<msg::PcmChunk> chunk)
+{
+    if (!process_.running())
+        throw SnapException("BruteFIR process not running, bailing...");
+
+    boost::asio::async_write(pipe_stdin_, boost::asio::buffer(chunk->payload, chunk->payloadSize), [this](const std::error_code& ec, std::size_t bytes) {
+        if (ec)
+        {
+            LOG(WARNING, LOG_TAG) << "async write failed: " << ec.message() << "\n";
+            return;
+        }
+
+    });
+
+    chunks_.push(chunk);
+
+    boost::asio::async_read(pipe_stdout_, boost::asio::buffer(chunk->payload, chunk->payloadSize), [this](const std::error_code& ec, std::size_t bytes) {
+        if (ec)
+        {
+            LOG(WARNING, LOG_TAG) << "async read failed: " << ec.message() << "\n";
+            return;
+        }
+
+        auto chunk = chunks_.pop();
+        addChunk(chunk);
+    });
+
+}
+
diff --git a/client/brutefir.hpp b/client/brutefir.hpp
new file mode 100644
index 00000000..b1272109
--- /dev/null
+++ b/client/brutefir.hpp
@@ -0,0 +1,55 @@
+/***
+    This file is part of snapcast
+    Copyright (C) 2022 Michael Auchter
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+***/
+
+#ifndef BRUTEFIR_HPP
+#define BRUTEFIR_HPP
+
+#include <cstdio>
+#include <memory>
+#include <thread>
+#include <functional>
+#include "common/message/pcm_chunk.hpp"
+#include "common/queue.h"
+#include <boost/asio.hpp>
+#include <boost/process.hpp>
+
+namespace bp = boost::process;
+using boost::asio::posix::stream_descriptor;
+
+using add_chunk_callback = std::function<void(std::shared_ptr<msg::PcmChunk>)>;
+
+class BruteFIR
+{
+public:
+    BruteFIR(boost::asio::io_context& ioc, add_chunk_callback cb);
+    virtual ~BruteFIR();
+
+    void filter(std::shared_ptr<msg::PcmChunk> chunk);
+private:
+    add_chunk_callback addChunk;
+
+    mutable std::mutex mutex_;
+    Queue<std::shared_ptr<msg::PcmChunk>> chunks_;
+
+    bp::child process_;
+    bp::async_pipe pipe_stdout_;
+    bp::async_pipe pipe_stdin_;
+    bp::async_pipe pipe_stderr_;
+};
+
+#endif
diff --git a/client/controller.cpp b/client/controller.cpp
index b0b34483..b72735dc 100644
--- a/client/controller.cpp
+++ b/client/controller.cpp
@@ -180,7 +180,7 @@ void Controller::getNextMessage()
             sampleFormat_ = decoder_->setHeader(headerChunk_.get());
             LOG(INFO, LOG_TAG) << "Codec: " << headerChunk_->codec << ", sampleformat: " << sampleFormat_.toString() << "\n";
 
-            stream_ = make_shared<Stream>(sampleFormat_, settings_.player.sample_format);
+            stream_ = make_shared<Stream>(sampleFormat_, settings_.player.sample_format, io_context_);
             stream_->setBufferLen(std::max(0, serverSettings_->getBufferMs() - serverSettings_->getLatency() - settings_.player.latency));
 
 #ifdef HAS_ALSA
diff --git a/client/stream.cpp b/client/stream.cpp
index 92c15852..8463e64e 100644
--- a/client/stream.cpp
+++ b/client/stream.cpp
@@ -29,6 +29,7 @@
 #include <cmath>
 #include <cstring>
 #include <iostream>
+#include <functional>
 
 
 using namespace std;
@@ -39,7 +40,7 @@ static constexpr auto kCorrectionBegin = 100us;
 
 // #define LOG_LATENCIES
 
-Stream::Stream(const SampleFormat& in_format, const SampleFormat& out_format)
+Stream::Stream(const SampleFormat& in_format, const SampleFormat& out_format, boost::asio::io_context& ioc)
     : in_format_(in_format), median_(0), shortMedian_(0), lastUpdate_(0), playedFrames_(0), correctAfterXFrames_(0), bufferMs_(cs::msec(500)), frame_delta_(0),
       hard_sync_(true)
 {
@@ -64,6 +65,7 @@ Stream::Stream(const SampleFormat& in_format, const SampleFormat& out_format)
     */
     // setRealSampleRate(format_.rate());
     resampler_ = std::make_unique<Resampler>(in_format_, format_);
+    brutefir_ = std::make_unique<BruteFIR>(ioc, std::bind(&Stream::addChunkForPlayback, this, std::placeholders::_1));
 }
 
 
@@ -104,26 +106,35 @@ void Stream::addChunk(unique_ptr<msg::PcmChunk> chunk)
         return;
 
     auto resampled = resampler_->resample(std::move(chunk));
-    if (resampled)
-    {
-        std::lock_guard<std::mutex> lock(mutex_);
-        recent_ = resampled;
-        chunks_.push(resampled);
+    if (!resampled)
+        return;
 
-        std::shared_ptr<msg::PcmChunk> front_;
-        while (chunks_.front_copy(front_))
-        {
-            age = std::chrono::duration_cast<cs::msec>(TimeProvider::serverNow() - front_->start());
-            if ((age > 5s + bufferMs_) && chunks_.try_pop(front_))
-                LOG(TRACE, LOG_TAG) << "Oldest chunk too old: " << age.count() << " ms, removing. Chunks in queue left: " << chunks_.size() << "\n";
-            else
-                break;
-        }
-    }
+    if (true)
+        brutefir_->filter(std::move(resampled));
+    else
+        addChunkForPlayback(resampled);
     // LOG(TRACE, LOG_TAG) << "new chunk: " << chunk->durationMs() << " ms, age: " << age.count() << " ms, Chunks: " << chunks_.size() << "\n";
 }
 
 
+void Stream::addChunkForPlayback(shared_ptr<msg::PcmChunk> chunk)
+{
+    std::lock_guard<std::mutex> lock(mutex_);
+    recent_ = chunk;
+    chunks_.push(chunk);
+
+    std::shared_ptr<msg::PcmChunk> front_;
+    while (chunks_.front_copy(front_))
+    {
+        auto age = std::chrono::duration_cast<cs::msec>(TimeProvider::serverNow() - front_->start());
+        if ((age > 5s + bufferMs_) && chunks_.try_pop(front_))
+            LOG(TRACE, LOG_TAG) << "Oldest chunk too old: " << age.count() << " ms, removing. Chunks in queue left: " << chunks_.size() << "\n";
+        else
+            break;
+    }
+}
+
+
 bool Stream::waitForChunk(const std::chrono::milliseconds& timeout) const
 {
     return chunks_.wait_for(timeout);
diff --git a/client/stream.hpp b/client/stream.hpp
index 8b88586e..8b6adac2 100644
--- a/client/stream.hpp
+++ b/client/stream.hpp
@@ -30,6 +30,7 @@
 #ifdef HAS_SOXR
 #include <soxr.h>
 #endif
+#include "brutefir.hpp"
 
 /// Time synchronized audio stream
 /**
@@ -39,7 +40,7 @@
 class Stream
 {
 public:
-    Stream(const SampleFormat& in_format, const SampleFormat& out_format);
+    Stream(const SampleFormat& in_format, const SampleFormat& out_format, boost::asio::io_context& ioc);
     virtual ~Stream() = default;
 
     /// Adds PCM data to the queue
@@ -96,6 +97,9 @@ private:
     void resetBuffers();
     void setRealSampleRate(double sampleRate);
 
+    /// Add fully processed chunk to queue for playback
+    void addChunkForPlayback(std::shared_ptr<msg::PcmChunk> chunk);
+
     SampleFormat format_;
     SampleFormat in_format_;
 
@@ -117,6 +121,7 @@ private:
     chronos::msec bufferMs_;
 
     std::unique_ptr<Resampler> resampler_;
+    std::unique_ptr<BruteFIR> brutefir_;
 
     std::vector<char> resample_buffer_;
     std::vector<char> read_buffer_;
-- 
2.33.1

